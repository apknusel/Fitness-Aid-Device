#ifndef F_CPU
#define F_CPU 3333333
#endif

#include <avr/io.h>
#include <util/delay.h>
#include <stdlib.h>
#include <string.h>
#include <stdio.h>
#include <avr/interrupt.h>
#include "max30102_math.h"

#ifndef MAX30102_H
#define	MAX30102_H

// Definitions for the memory locations on the MAX30102 and valid values
#define MAX30102_I2C_ADDR 0x57

// Constants for default settings
#define DEFAULT_POWER_LEVEL 0x1F
#define DEFAULT_SAMPLE_AVG 4
#define DEFAULT_LED_MODE 3
#define DEFAULT_SAMPLE_RATE 50
#define DEFAULT_PULSE_WIDTH 69
#define DEFAULT_ADC_RANGE 16384

#define MAX30102_FIFO_DATA 0x07

// Status Registers
#define MAX30105_INTSTAT1 0x00
#define MAX30105_INTSTAT2 0x01
#define MAX30105_INTENABLE1	0x02
#define MAX30105_INTENABLE2 0x03

// FIFO Registers
#define MAX30105_FIFOWRITEPTR 0x04
#define MAX30105_FIFOOVERFLOW 0x05
#define MAX30105_FIFOREADPTR 0x06
#define MAX30105_FIFODATA 0x07

// Configuration Registers
#define MAX30105_FIFOCONFIG 0x08
#define MAX30105_MODECONFIG 0x09
#define MAX30105_PARTICLECONFIG 0x0A
#define MAX30105_LED1_PULSEAMP 0x0C
#define MAX30105_LED2_PULSEAMP 0x0D
#define MAX30105_LED3_PULSEAMP 0x0E
#define MAX30105_LED_PROX_AMP 0x10
#define MAX30105_MULTILEDCONFIG1 0x11
#define MAX30105_MULTILEDCONFIG2 0x12

#define MAX30105_DIETEMPINT 0x1F
#define MAX30105_DIETEMPFRAC 0x20
#define MAX30105_DIETEMPCONFIG 0x21

#define MAX30105_PROXINTTHRESH 0x30

#define MAX30105_REVISIONID 0xFE
#define MAX30105_PARTID 0xFF

// MAX30105 Commands
#define MAX30105_INT_A_FULL_MASK 0b10000000
#define MAX30105_INT_A_FULL_ENABLE 0x80
#define MAX30105_INT_A_FULL_DISABLE 0x00

#define MAX30105_INT_DATA_RDY_MASK 0b01000000
#define MAX30105_INT_DATA_RDY_ENABLE 0x40
#define MAX30105_INT_DATA_RDY_DISABLE 0x00

#define MAX30105_INT_ALC_OVF_MASK 0b00100000
#define MAX30105_INT_ALC_OVF_ENABLE 0x20
#define MAX30105_INT_ALC_OVF_DISABLE 0x00

#define MAX30105_INT_PROX_INT_MASK 0b00010000
#define MAX30105_INT_PROX_INT_ENABLE 0x10
#define MAX30105_INT_PROX_INT_DISABLE 0x00

#define MAX30105_INT_DIE_TEMP_RDY_MASK 0b00000010
#define MAX30105_INT_DIE_TEMP_RDY_ENABLE 0x02
#define MAX30105_INT_DIE_TEMP_RDY_DISABLE 0x00

#define MAX30105_SAMPLEAVG_MASK 0b11100000
#define MAX30105_SAMPLEAVG_1 0x00
#define MAX30105_SAMPLEAVG_2 0x20
#define MAX30105_SAMPLEAVG_4 0x40
#define MAX30105_SAMPLEAVG_8 0x60
#define MAX30105_SAMPLEAVG_16 0x80
#define MAX30105_SAMPLEAVG_32 0xA0

#define MAX30105_ROLLOVER_MASK 0xEF
#define MAX30105_ROLLOVER_ENABLE 0x10
#define MAX30105_ROLLOVER_DISABLE 0x00

#define MAX30105_A_FULL_MASK 0xF0

#define MAX30105_SHUTDOWN_MASK 0x7F
#define MAX30105_SHUTDOWN 0x80
#define MAX30105_WAKEUP 0x00

#define MAX30105_RESET_MASK 0xBF
#define MAX30105_RESET 0x40

#define MAX30105_MODE_MASK 0xF8
#define MAX30105_MODE_REDONLY 0x02
#define MAX30105_MODE_REDIRONLY 0x03
#define MAX30105_MODE_MULTILED 0x07

#define MAX30105_ADCRANGE_MASK 0x9F
#define MAX30105_ADCRANGE_2048 0x00
#define MAX30105_ADCRANGE_4096 0x20
#define MAX30105_ADCRANGE_8192 0x40
#define MAX30105_ADCRANGE_16384 0x60

#define MAX30105_SAMPLERATE_MASK 0xE3
#define MAX30105_SAMPLERATE_50 0x00
#define MAX30105_SAMPLERATE_100 0x04
#define MAX30105_SAMPLERATE_200 0x08
#define MAX30105_SAMPLERATE_400 0x0C
#define MAX30105_SAMPLERATE_800 0x10
#define MAX30105_SAMPLERATE_1000 0x14
#define MAX30105_SAMPLERATE_1600 0x18
#define MAX30105_SAMPLERATE_3200 0x1C

#define MAX30105_PULSEWIDTH_MASK 0xFC
#define MAX30105_PULSEWIDTH_69 0x00
#define MAX30105_PULSEWIDTH_118 0x01
#define MAX30105_PULSEWIDTH_215 0x02
#define MAX30105_PULSEWIDTH_411 0x03

#define MAX30105_SLOT1_MASK 0xF8
#define MAX30105_SLOT2_MASK 0x8F
#define MAX30105_SLOT3_MASK 0xF8
#define MAX30105_SLOT4_MASK 0x8F

#define SLOT_NONE 0x00
#define SLOT_RED_LED 0x01
#define SLOT_IR_LED 0x02
#define SLOT_GREEN_LED 0x03
#define SLOT_NONE_PILOT 0x04
#define SLOT_RED_PILOT 0x05
#define SLOT_IR_PILOT 0x06
#define SLOT_GREEN_PILOT 0x07

#define MAX30105_EXPECTEDPARTID 0x15

// Size of buffer for storing samples
#define RATE_SIZE 4

// Struct for collecting sensor data
typedef struct {
    uint32_t ir;
    uint32_t red;
    uint32_t green;
} MAX30102_sample_t;

void MAX30102_bitMask(uint8_t reg, uint8_t mask, uint8_t value);
void MAX30102_softReset();
void MAX30102_setup();
void MAX30102_init();
void MAX30102_buffer_data(uint8_t toGet, uint8_t *buffer);
uint8_t MAX30102_readRegister8(uint8_t reg);
void MAX30102_writeRegister8(uint8_t reg, uint8_t value);
void MAX30102_get_sample(MAX30102_sample_t *sample);
void MAX30102_clearFIFO();
void RTC_init(void);

#endif	/* MAX30102_H */

